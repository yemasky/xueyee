package ota.jw.GenericSeamlessGateway;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.4
 * 2018-07-25T15:29:21.957+08:00
 * Generated source version: 3.2.4
 *
 */
@WebServiceClient(name = "BookingReservation",
                  wsdlLocation = "http://124.127.242.67:38196/GenericSeamlessGateway/CreateBookingReservation.asmx?WSDL",
                  targetNamespace = "http://www.opentravel.org/OTA/2003/05")
public class BookingReservation extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.opentravel.org/OTA/2003/05", "BookingReservation");
    public final static QName BookingReservationHttpPost = new QName("http://www.opentravel.org/OTA/2003/05", "BookingReservationHttpPost");
    public final static QName BookingReservationSoap12 = new QName("http://www.opentravel.org/OTA/2003/05", "BookingReservationSoap12");
    public final static QName BookingReservationSoap = new QName("http://www.opentravel.org/OTA/2003/05", "BookingReservationSoap");
    public final static QName BookingReservationHttpGet = new QName("http://www.opentravel.org/OTA/2003/05", "BookingReservationHttpGet");
    static {
        URL url = null;
        try {
            url = new URL("http://124.127.242.67:38196/GenericSeamlessGateway/CreateBookingReservation.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(BookingReservation.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://124.127.242.67:38196/GenericSeamlessGateway/CreateBookingReservation.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public BookingReservation(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public BookingReservation(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public BookingReservation() {
        super(WSDL_LOCATION, SERVICE);
    }

    public BookingReservation(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public BookingReservation(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public BookingReservation(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns BookingReservationHttpPost
     */
    @WebEndpoint(name = "BookingReservationHttpPost")
    public BookingReservationHttpPost getBookingReservationHttpPost() {
        return super.getPort(BookingReservationHttpPost, BookingReservationHttpPost.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookingReservationHttpPost
     */
    @WebEndpoint(name = "BookingReservationHttpPost")
    public BookingReservationHttpPost getBookingReservationHttpPost(WebServiceFeature... features) {
        return super.getPort(BookingReservationHttpPost, BookingReservationHttpPost.class, features);
    }


    /**
     *
     * @return
     *     returns BookingReservationSoap
     */
    @WebEndpoint(name = "BookingReservationSoap12")
    public BookingReservationSoap getBookingReservationSoap12() {
        return super.getPort(BookingReservationSoap12, BookingReservationSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookingReservationSoap
     */
    @WebEndpoint(name = "BookingReservationSoap12")
    public BookingReservationSoap getBookingReservationSoap12(WebServiceFeature... features) {
        return super.getPort(BookingReservationSoap12, BookingReservationSoap.class, features);
    }


    /**
     *
     * @return
     *     returns BookingReservationSoap
     */
    @WebEndpoint(name = "BookingReservationSoap")
    public BookingReservationSoap getBookingReservationSoap() {
        return super.getPort(BookingReservationSoap, BookingReservationSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookingReservationSoap
     */
    @WebEndpoint(name = "BookingReservationSoap")
    public BookingReservationSoap getBookingReservationSoap(WebServiceFeature... features) {
        return super.getPort(BookingReservationSoap, BookingReservationSoap.class, features);
    }


    /**
     *
     * @return
     *     returns BookingReservationHttpGet
     */
    @WebEndpoint(name = "BookingReservationHttpGet")
    public BookingReservationHttpGet getBookingReservationHttpGet() {
        return super.getPort(BookingReservationHttpGet, BookingReservationHttpGet.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns BookingReservationHttpGet
     */
    @WebEndpoint(name = "BookingReservationHttpGet")
    public BookingReservationHttpGet getBookingReservationHttpGet(WebServiceFeature... features) {
        return super.getPort(BookingReservationHttpGet, BookingReservationHttpGet.class, features);
    }

}
