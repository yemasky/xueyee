
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package ota.jw.ws.impl;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;

import javax.jws.WebService;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.OTA.config.Config;
import com.OTA.model.ForwardRoomState_result;
import com.OTA.service.impl.PmsServiceImpl;
import com.fasterxml.jackson.databind.ObjectMapper;

import ota.jw.ARIAdapterGateWay.ARIAdapterGateWaySoap;
import ota.jw.ARIAdapterGateWay.ArrayOfHotelInfo;
import ota.jw.ARIAdapterGateWay.ArrayOfHotelproductCount;
import ota.jw.ARIAdapterGateWay.ArrayOfProductCountInfo;
import ota.jw.ARIAdapterGateWay.HotelInfo;
import ota.jw.ARIAdapterGateWay.HotelproductCount;
import ota.jw.ARIAdapterGateWay.ProductCountInfo;
import ota.jw.ARIAdapterGateWay.QueryHotelAvailStatusRQ;
import ota.jw.ARIAdapterGateWay.QueryHotelAvailStatusRS;
import ota.jw.ARIAdapterGateWay.QueryHotelRoomCountRQ;
import ota.jw.ARIAdapterGateWay.QueryHotelRoomCountRS;
import ota.jw.ARIAdapterGateWay.QueryHotelRoomRateRQ;
import ota.jw.ARIAdapterGateWay.QueryHotelRoomRateRS;

/**
 * This class was generated by Apache CXF 3.2.4 2018-07-26T15:51:49.977+08:00
 * Generated source version: 3.2.4
 *
 */

@WebService(serviceName = "ARIAdapterGateWay", portName = "ARIAdapterGateWaySoap",targetNamespace = "http://tempuri.org/", 
			//wsdlLocation = "http://124.127.242.67:38196/HW.ARIAdapterGateWay/ARIAdapterGateWay.asmx?WSDL", 
			endpointInterface = "ota.jw.ARIAdapterGateWay.ARIAdapterGateWaySoap")

public class QueryHotelSoapImpl implements ARIAdapterGateWaySoap {

	protected static Logger logger = LoggerFactory.getLogger(QueryHotelSoapImpl.class);
	protected static ObjectMapper mapper = new ObjectMapper();
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * ota.jw.ARIAdapterGateWay.ARIAdapterGateWaySoap#queryHotelRoomRate(ota.jw.
	 * ARIAdapterGateWay.QueryHotelRoomRateRQ queryHotelRoomRateRQ)*
	 */
	public QueryHotelRoomRateRS queryHotelRoomRate(QueryHotelRoomRateRQ queryHotelRoomRateRQ) {
		logger.info("Executing operation queryHotelRoomRate");
		System.out.println(queryHotelRoomRateRQ);
		try {
			QueryHotelRoomRateRS _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * 5.13. 获取厂商实时房量 
	 * 
	 * @see
	 * ota.jw.ARIAdapterGateWay.ARIAdapterGateWaySoap#queryHotelRoomCount(ota.jw
	 * .ARIAdapterGateWay.QueryHotelRoomCountRQ queryHotelRoomCountRQ)*
	 */
	public QueryHotelRoomCountRS queryHotelRoomCount(QueryHotelRoomCountRQ queryHotelRoomCountRQ) {
		logger.info("Executing operation queryHotelRoomCount");
		System.out.println(queryHotelRoomCountRQ);
		try {
			ArrayOfHotelInfo allHotelInfo = queryHotelRoomCountRQ.getHotelInfos();
			List<HotelInfo> hotelInfos = allHotelInfo.getHotelInfo();
			HotelInfo hotelInfo = hotelInfos.get(0);
			
			String fromDate = queryHotelRoomCountRQ.getFromDate();
			String toDate = queryHotelRoomCountRQ.getToDate();
			
			QueryHotelRoomCountRS queryHotelRoomCountRS = new QueryHotelRoomCountRS();
			queryHotelRoomCountRS.setRetCode("1");// 返回代码，成功=1，其他为失败。
			queryHotelRoomCountRS.setErrorMsg("");// 错误描述，成功的时候为空。
			queryHotelRoomCountRS.setIsShareCount("0");// 是否共享房量，0=表示不共享房量，产品级房量；1=表示共享房量，房型级房量
			ArrayOfHotelproductCount arrayOfHotelproductCount = new ArrayOfHotelproductCount();

			List<HotelproductCount> hotelproductCounts = arrayOfHotelproductCount.getHotelproductCount();

			HotelproductCount hotelproductCount = new HotelproductCount();
			String hotelCode = hotelInfo.getHotelCode();
			String ratePlanCode = hotelInfo.getRatePlanCode();
			String[] ratePlanKey = ratePlanCode.split("-");
			//int system_id = Integer.parseInt(ratePlanKey[0]);
			int sell_id = Integer.parseInt(ratePlanKey[1]);
			
			hotelproductCount.setHotelCode(hotelCode);//厂商酒店代码 
			
			int hotel_id = Integer.parseInt(hotelCode.replace(Config.hotelCodePrefix, ""));
			PmsServiceImpl pmsServiceImpl = new PmsServiceImpl();
			String forwardRoomResult = pmsServiceImpl.forwardRoomState(hotel_id, sell_id, fromDate, toDate, 0);
			ForwardRoomState_result forwardRoomStateResult = mapper.readValue(forwardRoomResult, ForwardRoomState_result.class);
			HashMap<String, HashMap<String, String>> forwardRoomState = forwardRoomStateResult.getItemData();
			//
			ArrayOfProductCountInfo arrayOfProductCountInfo = new ArrayOfProductCountInfo();
			List<ProductCountInfo> productCountInfos = arrayOfProductCountInfo.getProductCountInfo();
			//
			DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
			long begin = dateFormat.parse(fromDate).getTime();
			long end = dateFormat.parse(toDate).getTime();
			Date b_Date = null;
			GregorianCalendar startCalendar = new GregorianCalendar();
			for (long k = begin; k <= end; k += 86400000) {
				b_Date = new Date(k);
				String thisDate = dateFormat.format(b_Date);
				//String nextDate = dateFormat.format(new Date(k + 86400000));
				//String nextDate = dateFormat.format(b_Date);
				startCalendar.setTime(b_Date);
				//int year = startCalendar.get(Calendar.YEAR);
				//int month = startCalendar.get(Calendar.MONTH) + 1;
				//int day = startCalendar.get(Calendar.DAY_OF_MONTH);
				HashMap<String, String> layoutRoom = forwardRoomState.get(thisDate);
				for (String layout_key : layoutRoom.keySet()) {
					// 房型代码
					String roomTypeCode = hotel_id + "-" + layout_key;//
					
					ProductCountInfo productCountInfo = new ProductCountInfo();
					productCountInfo.setRoomTypeCode(roomTypeCode);//厂商房型代码 
					productCountInfo.setRatePlanCode(ratePlanCode);//厂商价格代码
					String roomCount = layoutRoom.get(layout_key);
					productCountInfo.setRoomCount(roomCount);//房量 
					productCountInfo.setBookDate(thisDate);//日期，格式：yyyy-MM-dd
					productCountInfo.setNoRoomMsg("");
					if(roomCount.equals("0")) {
						productCountInfo.setNoRoomMsg("5");//无房原因，如果房量为 0，返回无房原因：1=关房,2=满房，3=房价代码不存在，4=房型代码不存在，5=其他原因 
					}
		
					productCountInfos.add(productCountInfo);
				}
			}
			hotelproductCount.setProductCountInfos(arrayOfProductCountInfo);

			hotelproductCounts.add(hotelproductCount);

			queryHotelRoomCountRS.setData(arrayOfHotelproductCount);
			
			return queryHotelRoomCountRS;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * ota.jw.ARIAdapterGateWay.ARIAdapterGateWaySoap#queryHotelAvailStatus(ota.
	 * jw.ARIAdapterGateWay.QueryHotelAvailStatusRQ queryHotelAvailStatusRQ)*
	 */
	public QueryHotelAvailStatusRS queryHotelAvailStatus(QueryHotelAvailStatusRQ queryHotelAvailStatusRQ) {
		logger.info("Executing operation queryHotelAvailStatus");
		System.out.println(queryHotelAvailStatusRQ);
		try {
			ota.jw.ARIAdapterGateWay.QueryHotelAvailStatusRS _return = null;
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
