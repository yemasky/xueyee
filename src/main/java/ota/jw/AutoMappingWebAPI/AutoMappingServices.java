package ota.jw.AutoMappingWebAPI;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.4
 * 2018-07-05T16:01:31.734+08:00
 * Generated source version: 3.2.4
 * 测试地址：http://124.127.242.67:38196/AutoMappingWebAPI/AutoMappingServices.asmx
 */
@WebServiceClient(name = "AutoMappingServices",
                  wsdlLocation = "http://switchcore.hubwisdom.cn/AutoMappingWebAPISite/AutoMappingServices.asmx?WSDL",
                  targetNamespace = "http://www.opentravel.org/OTA/2003/05")
public class AutoMappingServices extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.opentravel.org/OTA/2003/05", "AutoMappingServices");
    public final static QName AutoMappingServicesSoap = new QName("http://www.opentravel.org/OTA/2003/05", "AutoMappingServicesSoap");
    public final static QName AutoMappingServicesSoap12 = new QName("http://www.opentravel.org/OTA/2003/05", "AutoMappingServicesSoap12");
    static {
        URL url = null;
        try {
            url = new URL("http://switchcore.hubwisdom.cn/AutoMappingWebAPISite/AutoMappingServices.asmx?WSDL");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(AutoMappingServices.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://switchcore.hubwisdom.cn/AutoMappingWebAPISite/AutoMappingServices.asmx?WSDL");
        }
        WSDL_LOCATION = url;
    }

    public AutoMappingServices(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public AutoMappingServices(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public AutoMappingServices() {
        super(WSDL_LOCATION, SERVICE);
    }

    public AutoMappingServices(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public AutoMappingServices(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public AutoMappingServices(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns AutoMappingServicesSoap
     */
    @WebEndpoint(name = "AutoMappingServicesSoap")
    public AutoMappingServicesSoap getAutoMappingServicesSoap() {
        return super.getPort(AutoMappingServicesSoap, AutoMappingServicesSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AutoMappingServicesSoap
     */
    @WebEndpoint(name = "AutoMappingServicesSoap")
    public AutoMappingServicesSoap getAutoMappingServicesSoap(WebServiceFeature... features) {
        return super.getPort(AutoMappingServicesSoap, AutoMappingServicesSoap.class, features);
    }


    /**
     *
     * @return
     *     returns AutoMappingServicesSoap
     */
    @WebEndpoint(name = "AutoMappingServicesSoap12")
    public AutoMappingServicesSoap getAutoMappingServicesSoap12() {
        return super.getPort(AutoMappingServicesSoap12, AutoMappingServicesSoap.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns AutoMappingServicesSoap
     */
    @WebEndpoint(name = "AutoMappingServicesSoap12")
    public AutoMappingServicesSoap getAutoMappingServicesSoap12(WebServiceFeature... features) {
        return super.getPort(AutoMappingServicesSoap12, AutoMappingServicesSoap.class, features);
    }

}
